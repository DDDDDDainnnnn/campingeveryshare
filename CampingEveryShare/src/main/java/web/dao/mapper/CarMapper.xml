<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="web.dao.face.CarDao">
	
   <sql id="selectCar">
      SELECT CAR_NO,USER_ID,CAR_NAME,CAR_NUMBER,CAR_SIZE,LOCATION,AREA,AREA_DETAIL
      ,PICKUP_TIME_START,PICKUP_TIME_END,CAR_PAX,CAR_SPAX,CAR_BEDS,PRICE,EXTRA_PRICE
      ,CAR_ELEC,CAR_WATER,CAR_TABLE,CAR_SINK,CAR_KITCHEN,CAR_TEMP,CAR_SHOWER,CAR_TOILET
      ,CAR_PET,CAR_SMOKE,CAR_STATUS,CONTENT, DELETE_STATUS
      , (SELECT stored_name FROM (SELECT stored_name, ROWNUM as rnum FROM boardfiletb WHERE board_no = C.car_no ORDER BY file_no) WHERE rnum = 1) AS thumbnailname
      , (SELECT user_nick FROM usertb U WHERE U.user_id = C.user_id) as hostnick
      FROM cartb C
   </sql>

   <select id="selectCntAll" resultType="int" parameterType="web.util.Paging">
      SELECT count(*) FROM cartb
      <where>
         AND car_status = 2
         AND delete_status = 0
         <if test="location != 0">
            AND location = #{location }
         </if>
      </where>
   </select>
	
   <select id="selectAll" parameterType="web.util.Paging" resultType="map">
      SELECT * FROM (
      SELECT rownum rnum, R.* FROM (
         <include refid="selectCar" />
         <where>
            <if test="search != null and !''.equals(search)">
               AND car_name LIKE '%' || (#{search }) || '%'
            </if>
<!--             <if test="category !=null and !''.equals(category)"> -->
            <if test="location != 0">
               AND location = #{location }
            </if>
            AND car_status = 2
            AND delete_status = 0
         </where>
         ORDER BY car_no DESC
      ) R )
      <where>
         AND rnum BETWEEN #{startNo } AND #{endNo }
      </where>
   </select>
	
	<select id="selectByCarNo" parameterType="Car" resultType="Car">
		<include refid="selectCar" />
		<where>
			AND car_no = #{carNo }
		</where>
	</select>


	<insert id="insertCarWrite" parameterType="Car">
	<selectKey keyProperty="carNo" resultType="int" order="BEFORE">
		SELECT car_seq.nextval FROM dual
	</selectKey>
	INSERT INTO cartb(CAR_NO,USER_ID,CAR_NAME,CAR_NUMBER,CAR_SIZE,LOCATION,AREA,AREA_DETAIL,PICKUP_TIME_START,PICKUP_TIME_END,CAR_PAX,CAR_SPAX,CAR_BEDS,PRICE,EXTRA_PRICE,CAR_ELEC,CAR_WATER,CAR_TABLE,CAR_SINK,CAR_KITCHEN,CAR_TEMP,CAR_SHOWER,CAR_TOILET,CAR_PET,CAR_SMOKE,CAR_STATUS,CONTENT)
  	VALUES(#{carNo}, #{userId}, #{carName}, #{carNumber}, #{carSize}, #{location}, #{area}, #{areaDetail}, #{pickupTimeStart}, #{pickupTimeEnd}, #{carPax}, #{carSpax}, #{carBeds}, #{price},#{extraPrice}, #{carElec}, #{carWater}, #{carTable}, #{carSink}, #{carKitchen}, #{carTemp}, #{carShower}, #{carToilet}, #{carPet}, #{carSmoke}, 0, #{content})
	</insert>

	
	<insert id="insertFile" parameterType="Boardfile">
		<selectKey order="BEFORE" resultType="int" keyProperty="fileNo">
			SELECT file_seq.nextval FROM dual
		</selectKey>
		INSERT INTO boardfiletb ( file_no, board_no, origin_name, stored_name,board_cate )
		VALUES ( #{fileNo}, #{boardNo}, #{originName}, #{storedName},1 )
	</insert>
	
	<select id="selectBycarNumber" parameterType="Car">
		SELECT count(*) FROM cartb
		WHERE car_number = #{carNumber}
	</select>
	
	<select id="selectCarNoByUserId" parameterType="User">
		SELECT car_no FROM cartb WHERE user_id = #{userId} AND delete_status = 0
	</select>
	
	<select id="selectCarSummaryByCarNo" parameterType="Integer">
	SELECT
	  (SELECT stored_name FROM boardfiletb WHERE board_no = #{carNo}) AS stored_name,
	  (SELECT car_name FROM cartb WHERE car_no = #{carNo}) AS car_name,
	  (SELECT price FROM cartb WHERE car_no = #{carNo}) AS price,
	  (SELECT COUNT(*) FROM renttb WHERE car_no = #{carNo} AND rent_status = 1) AS rent_count,
	  (SELECT car_number FROM cartb where car_no = #{carNo}) AS car_number,
	  (SELECT car_status FROM cartb WHERE car_no = #{carNo}) AS car_status
	FROM dual
	</select>
	
	<select id="selectCarByCarNo" parameterType="Car">
	SELECT * FROM cartb
	WHERE car_number=#{carNumber}
	</select>
	
	<select id="selectFileInfoByCarNo" parameterType="Car">
	SELECT origin_name,stored_name FROM boardfiletb
	WHERE board_no = #{carNo}
	AND board_cate = 1
	</select>
	
	<update id="updateCar" parameterType="Car">
    UPDATE cartb
    SET 
        CAR_NAME = #{carName},
        CAR_SIZE = #{carSize},
        LOCATION = #{location},
        AREA = #{area},
        AREA_DETAIL = #{areaDetail},
        PICKUP_TIME_START = #{pickupTimeStart},
        PICKUP_TIME_END = #{pickupTimeEnd},
        CAR_PAX = #{carPax},
        CAR_SPAX = #{carSpax},
        CAR_BEDS = #{carBeds},
        PRICE = #{price},
        EXTRA_PRICE = #{extraPrice},
        CAR_ELEC = #{carElec},
        CAR_WATER = #{carWater},
        CAR_TABLE = #{carTable},
        CAR_SINK = #{carSink},
        CAR_KITCHEN = #{carKitchen},
        CAR_TEMP = #{carTemp},
        CAR_SHOWER = #{carShower},
        CAR_TOILET = #{carToilet},
        CAR_PET = #{carPet},
        CAR_SMOKE = #{carSmoke},
        CAR_STATUS = 0,
        CONTENT = #{content}
    WHERE car_number = #{carNumber}
</update>

<select id="checkFile" parameterType="Boardfile" resultType="int">
SELECT count(*) from boardfiletb
WHERE board_no = #{boardNo}
AND board_cate = 1
</select>

<update id="updateFile" parameterType="Boardfile">
UPDATE boardfiletb
SET 
	origin_name=#{originName},
	stored_name=#{storedName}
WHERE board_no = #{boardNo}
AND board_cate = 1
	
</update>

<select id="selectBycarNumberNew" parameterType="Car">
SELECT * from cartb
WHERE car_number=#{carNumber}
</select>

<delete id="deleteCar" parameterType="Car">
UPDATE cartb
SET delete_status = 1
WHERE car_number = #{carNumber}
</delete>

<update id="updateCarStop" parameterType="Car">
UPDATE cartb
SET car_status = 3
WHERE car_number = #{carNumber}
</update>

<update id="resumeCar" parameterType="Car">
UPDATE cartb
SET car_status = 2
WHERE car_number = #{carNumber}
</update>

<update id="updateApproveCae" parameterType="Car">
UPDATE cartb
SET car_status = 1
WHERE car_number = #{carNumber}
</update>

<select id="selectRentList" parameterType="User" resultType="Map">
WITH PaginatedRent AS (
    SELECT
    	R.rent_no, 
        R.rent_status,
        F.stored_name,
        C.car_name,
        C.car_number,
        U.user_nick,
        U.profile,
        R.MERCHANT_UID, 
        R.user_id as custom_id,
        TO_CHAR(R.start_date, 'YYYY-MM-DD') AS start_date,
        TO_CHAR(R.end_date, 'YYYY-MM-DD') AS end_date,
         TO_CHAR(R.amount, '999,999,999') AS amount,
        TO_CHAR(R.booking_date, 'YYYY-MM-DD') AS booking_date,
        R.car_no,
        C.user_id,
        ROW_NUMBER() OVER (ORDER BY R.rent_status) AS RNUM
    FROM 
        renttb R
        INNER JOIN cartb C ON R.car_no = C.car_no
        INNER JOIN boardfiletb F ON C.car_no = F.board_no
        INNER JOIN usertb U ON R.user_id = U.user_id
    WHERE C.user_id = #{user.userId}
)
SELECT * FROM PaginatedRent
WHERE RNUM BETWEEN #{paging.startNo} AND #{paging.endNo}
</select>

<select id="selectCntLentList" parameterType="user">
SELECT count(*) from(
    SELECT 
        R.rent_status,
        F.stored_name,
        C.car_name,
        C.car_number,
        U.user_nick,
        U.profile,
        R.start_date,
        R.end_date,
        R.amount,
        R.booking_date,
        R.car_no,
        C.user_id,
        ROW_NUMBER() OVER (ORDER BY R.end_date DESC) AS RNUM
    FROM 
        renttb R
        INNER JOIN cartb C ON R.car_no = C.car_no
        INNER JOIN boardfiletb F ON C.car_no = F.board_no
        INNER JOIN usertb U ON R.user_id = U.user_id
    WHERE C.user_id = #{userId})
</select>

<select id="selectOngoing" parameterType="User">
SELECT count(*) FROM(
SELECT
    R.rent_no
    FROM renttb R
    INNER JOIN cartb C ON C.car_no = R.car_no
    INNER JOIN usertb U ON C.user_id = U.user_id
    WHERE U.user_id = #{userId}
    AND R.rent_status = 0)
</select>

<select id="selectDone" parameterType="User">
SELECT count(*) FROM(
SELECT
    R.rent_no
    FROM renttb R
    INNER JOIN cartb C ON C.car_no = R.car_no
    INNER JOIN usertb U ON C.user_id = U.user_id
    WHERE U.user_id = #{userId}
    AND R.rent_status = 1)
</select>

<select id="selectCancel" parameterType="User">
SELECT count(*) FROM(
SELECT
    R.rent_no
    FROM renttb R
    INNER JOIN cartb C ON C.car_no = R.car_no
    INNER JOIN usertb U ON C.user_id = U.user_id
    WHERE U.user_id = #{userId}
    AND R.rent_status = 2)
</select>

<select id="getAvalible" parameterType="User" resultType="Integer"> <!-- 출금 가능 수익금 -->
SELECT 
    SUM(I.deduct_amount) 
FROM incometb I
INNER JOIN renttb R ON R.rent_no = I.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON C.user_id = U.user_id
WHERE C.user_id = #{userId}
AND I.income_status = 0
</select>
<select id="getExpectation" parameterType="User" resultType="Integer"><!-- 예상 수익금 -->
SELECT 
    SUM(R.amount * 0.9)
FROM renttb R
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = #{userId}
AND R.rent_status = 0
ORDER BY R.rent_status
</select> 
<select id="getTotal" parameterType="User" resultType="Integer"><!-- 총 수익금 -->
SELECT --총 수익금
    SUM(I.deduct_amount)
FROM incometb I
INNER JOIN renttb R ON I.rent_no = R.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = 'user2'
</select> 
<select id="selectCntProceedsList" parameterType="User"> <!-- 총 판매현황 -->
SELECT count(*) FROM(
    SELECT 
    R.rent_status,
    R.amount AS price,
    R.amount*0.9 deduct_price,
    C.car_number,
    R.booking_date,
    I.income_status
FROM renttb R
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
LEFT JOIN incometb I ON I.rent_no = R.rent_no
WHERE C.user_id = #{userId}
ORDER BY R.rent_status ASC)
</select>
<select id="selectProceedsList" parameterType="User" resultType="Map">
WITH PaginatedSell AS(
SELECT 
    R.rent_status,
    R.amount AS price,
    R.amount*0.9 deduct_price,
    C.car_number,
    TO_CHAR(R.booking_date, 'YYYY-MM-DD') AS booking_date,
    I.income_status,
    R.rent_no,
    ROW_NUMBER() OVER(ORDER BY R.rent_status, I.income_status ASC) AS RNUM
FROM renttb R
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
LEFT JOIN incometb I ON I.rent_no = R.rent_no
WHERE C.user_id = #{user.userId}
)
SELECT * FROM PaginatedSell
WHERE RNUM BETWEEN #{paging.startNo} AND #{paging.endNo}
</select>
<select id="selectAccount" parameterType="User" resultType="String">
SELECT 
    A.bank_account || ' ' || A.bank_name AS combined_info
FROM accounttb A
INNER JOIN usertb U ON U.user_id = A.user_id
WHERE A.user_id = #{userId}
</select>

<select id="commit" parameterType="java.util.List">
    UPDATE incometb
    SET income_status = 1 ,
    post_date = SYSTIMESTAMP AT TIME ZONE 'Asia/Seoul'
    WHERE rent_no IN
    <foreach collection="list" item="rentNo" open="(" separator="," close=")">
        #{rentNo}
    </foreach>
</select>
<select id="selectCntWithdrawList" parameterType="User">
SELECT count(*) FROM(
SELECT 
    I.deduct_amount,
    TO_CHAR(I.post_date,'YYYY-MM-DD') as post_date,
    I.income_status,
    C.car_number,
    ROW_NUMBER() OVER(ORDER BY I.income_status DESC) AS RNUM
FROM incometb I
INNER JOIN renttb R ON R.rent_no = I.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = #{userId}
AND (I.income_status = 1 or I.income_status = 2))
</select>

<select id="selectWithdrawList" parameterType="User">
WITH PaginatedSell AS(
SELECT 
    I.deduct_amount,
    TO_CHAR(I.post_date,'YYYY-MM-DD') as post_date,
    I.income_status,
    C.car_number,
    ROW_NUMBER() OVER(ORDER BY I.income_status) AS RNUM
FROM incometb I
INNER JOIN renttb R ON R.rent_no = I.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = #{user.userId}
AND (I.income_status = 1 or I.income_status = 2)
)
SELECT * FROM PaginatedSell
WHERE RNUM BETWEEN #{paging.startNo} AND #{paging.endNo}
</select>

<select id="selectCntChargeList" parameterType="User">
SELECT count(*) FROM(
SELECT 
    I.income_status,
    I.amount,
    I.deduct_amount,
    (I.amount-I.deduct_amount) AS charge,
    C.car_number
FROM incometb I
INNER JOIN renttb R ON R.rent_no = I.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = #{userId}
AND (I.income_status = 1 or I.income_status = 2)
)
</select>

<select id="selectChargeList" parameterType="User">
WITH PaginatedSell AS(
SELECT 
    I.deduct_amount,
    I.amount,
    (I.amount-I.deduct_amount) AS charge,
    TO_CHAR(I.post_date,'YYYY-MM-DD') as post_date,
    I.income_status,
    C.car_number,
    ROW_NUMBER() OVER(ORDER BY I.income_status) AS RNUM
FROM incometb I
INNER JOIN renttb R ON R.rent_no = I.rent_no
INNER JOIN cartb C ON C.car_no = R.car_no
INNER JOIN usertb U ON U.user_id = C.user_id
WHERE C.user_id = #{user.userId}
AND (I.income_status = 1 or I.income_status = 2)
)
SELECT * FROM PaginatedSell
WHERE RNUM BETWEEN #{paging.startNo} AND #{paging.endNo}
</select>
<select id="selectAccountByUserId" parameterType="Account">
SELECT count(*) FROM(SELECT * FROM accounttb WHERE user_id = #{userId})
</select>
<update id="updateAccount" parameterType="Account">
UPDATE accounttb
SET bank_account = #{bankAccount}, bank_name = #{bankName}
WHERE user_id = #{userId}
</update>

<insert id="insertAccount" parameterType="Account">
INSERT INTO accounttb(account_no,user_id,bank_account,bank_name)
VALUES(account_seq.nextval,#{userId},#{bankAccount},#{bankName})
</insert>

</mapper>